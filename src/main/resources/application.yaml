spring:
  config:
    import: optional:file:.env
  datasource:
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
    url: ${DEFAULT.DB_URL}
    username: ${DEFAULT.USER_NAME}
    password: ${DEFAULT.PASSWORD}
  jackson:
    deserialization:
      fail-on-unknown-properties: false
    default-property-inclusion: non_null

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${SOCIAL.GOOGLE.CLIENT_ID}
            client-secret: ${SOCIAL.GOOGLE.SECRET}
            scope:
              - email
              - profile
          kakao:
            client-id: ${SOCIAL.KAKAO.CLIENT_ID}
            client-secret: ${SOCIAL.KAKAO.SECRET}
            client-authentication-method: client_secret_post #쿼리스트링으로 client-id & client-secret이 kakao로 날아감
            authorization-grant-type: authorization_code #보안에 강함 #권한 부여 유형(인가 코드 다음 access-token을 받는 방식 결정)
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
                          # http://localhost:8080/login/oauth2/code/kakao와 같음
            scope:
              - profile_nickname
              - profile_image
            client-name: Kakao
          naver:
            client-id: ${SOCIAL.NAVER.CLIENT_ID}
            client-secret: ${SOCIAL.NAVER.SECRET}
            client-authentication-method: client_secret_post #쿼리스트링으로 client-id & client-secret이 kakao로 날아감
            authorization-grant-type: authorization_code #보안에 강함 #권한 부여 유형(인가 코드 다음 access-token을 받는 방식 결정)
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
                          # http://localhost:8080/login/oauth2/code/naver와 같음
            scope:
              - name
              - email
              - profile_image
            client-name: Naver

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-info-authentication-method: header #사용자 정보를 가져올 때 토큰을 보내는 방법 , 속성값(header, form, query), header가 기본값 (플랫폼의 규약에 따라야함) -Naver, Kakao는 header이기 때문에 생략 가능
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize #소셜 로그인 버튼을 눌렀을 때 이동할 URL
            token-uri: https://nid.naver.com/oauth2.0/token #사용자 서비스 서버가 Redirect URI로 전달받은 (인가 코드)로 (액세스 토큰)을 요청하는 URI
            user-info-uri: https://openapi.naver.com/v1/nid/me #서비스 서버가 발급받은 액세스 토큰으로 사용자 정보를 가져오는 URI 입니다.
            user-name-attribute: response #user name이 들어있는 속성
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 30MB



mybatis:
  mapper-locations: mappers/**/*.xml

springdoc:
  api-docs:
    version: openapi_3_1
  swagger-ui:
    path: /swagger
    operations-sorter: method
    default-model-expand-depth: 10
    default-models-expand-depth: 10
    display-request-duration: true

  cache:
    disabled: true

file:
  directory: ${DEFAULT.FILE_PATH}

# custom 속성 지정
# 키 이름은 내 맘대로, value를 인지할 수만 있으면 상관 X(뭘 쓰던 상관이 없지만 노출하면 안되고 30자 정도 되어야 함)
# 바뀌면 이전의 키로 작성된 애들은 쓸수 없어 로그아웃 처리
# 아래 자료들을 가져와서 자바의 멤버필드에 넣고 토큰 발행용도
app:
  jwt:
    secret: ${JWT_SECRET}
    #JWT 만들 때 사용하는 열쇠(암호화) > 나중에 복호화 할 때도 사용
    header-schema-name: authorization #보통 해더에 JWT 토큰 담음, 키 이름으로는 뭘 쓸지 상관없으나 프론트와 협의
    token-type: Bearer #토큰의 종류 Bearer는 JWT, OAuth(주로 소셜로그인-회원가입을 자동화-에 사용)를 의미 프리픽스로 항상 들어감
    access-token-expiry: 1_800_000 #토큰 만료시간 1000ms=1초 (7_200_000=2시간)
    refresh-token-cookie-name: refresh-token
    refresh-token-expiry: 1_296_000_000 #토큰 만료시간 15일

  oauth2:
    base-uri: /oauth2/authorization
    authorization-request-cookie-name: oauth_auth_request
    redirect-uri-param-cookie-name: redirect_uri
    cookie-expiry-seconds: 180
    authorized-redirect-uris:
        #리스트
      - http://localhost:3000/oauth/redirect
      - http://localhost:8080/oauth/redirect
      - http://192.168.0.144:5121/oauth/redirect #내부 도커서버 ip
      - http://112.222.157.156.5121/oauth/redirect #외부 ip

#위는 프로필 설정 X 이름 X =>디폴트 / 디폴트 쓰면 프로필마다 저 내용 다 쓸 필요 X
#내가 손으로 테스트 할 때는 SQL이 실행 안 되길 바람>>어떨떄는되고 어떨때는 안 되길 바람
#위랑 밑은 다른 파일

#actuator
management:
  #  각 엔드포인트 설정
  #  엔드포인트 => URL
  endpoint:
    health:
      #      /actuator/health의 디테일한 정보를 표시
      show-details: always
  shutdown:
    enabled: true

  # 모든 엔드포인트 전체 설정
  endpoints:
    web:
      exposure:
        #        모든 End Point 를 웹에 노출 하겠다.
        #        include: "*"
        include: "*"
  info:
    #      /actuator/java의 디테일한 정보를 표시
    java:
      enabled: true
    #      /actuator/os의 디테일한 정보를 표시
    os:
      enabled: true
    #      /actuator/env의 디테일한 정보를 표시
    env:
      enabled: true
  server:
    port: 8080


---
spring:
  config:
    activate:
      on-profile: tdd
  datasource:
    url: jdbc:mariadb://localhost:3306/greengram2024_tdd_test
  sql:
    init:
      mode: always
